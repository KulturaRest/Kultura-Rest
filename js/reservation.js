// js/reservation.js

document.addEventListener("DOMContentLoaded", () => {
  // –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è, —è–∫—â–æ –≤—ñ–¥–∫—Ä–∏—Ç–æ —á–µ—Ä–µ–∑ file://
  if (window.location.protocol === "file:") {
    console.warn(
      "–î–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Å–∞–π—Ç —á–µ—Ä–µ–∑ HTTP-—Å–µ—Ä–≤–µ—Ä (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, python -m http.server)."
    );
  }

  // 1. –ì—Ä—É–ø–∏ —Å—Ç–æ–ª—ñ–≤: maxGuests ‚Üí –º–∞—Å–∏–≤ ID
  const tableGroups = [
    { maxGuests: 2, tables: [1, 2, 3] },
    { maxGuests: 4, tables: [4, 5, 6] },
    { maxGuests: 6, tables: [7, 8, 9] },
    { maxGuests: 8, tables: [10, 11] },
    { maxGuests: Infinity, tables: [12] }
  ];

  // 2. –í–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä —Å—Ç–æ–ª—É
  function pickRandomTable(guestsCount) {
    const grp = tableGroups.find(g => guestsCount <= g.maxGuests);
    return grp ? grp.tables[Math.floor(Math.random()*grp.tables.length)] : null;
  }

  const form       = document.getElementById("reservation-form"),
        tableInput = document.getElementById("reservation-table-id");

  form.addEventListener("submit", async e => {
    e.preventDefault();

    // 3. –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö (guestsStr ‚Äî —Ä—è–¥–æ–∫)
    const name       = form.name.value.trim(),
          phone      = form.phone.value.trim(),
          date       = form.reservation_date.value,
          time       = form.reservation_time.value,
          guestsStr  = form.reservation_guests.value,
          guestsNum  = parseInt(guestsStr,10),
          message    = form.message.value.trim();

    // 4. –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if(!name||!phone||!date||!time||!guestsStr||isNaN(guestsNum)){
      return alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ.");
    }

    // 5. –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç—ñ–ª
    const tableIdNum = pickRandomTable(guestsNum);
    if(!tableIdNum){
      return alert("–ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å—Ç–æ–ª—ñ–≤ –¥–ª—è —Ü—ñ—î—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥–æ—Å—Ç–µ–π.");
    }
    const tableIdStr = String(tableIdNum);
    tableInput.value = tableIdStr;

    // 6. –§–æ—Ä–º—É—î–º–æ payload (—É—Å—ñ –ø–æ–ª—è ‚Äî —Ä—è–¥–∫–∏)
    const formData = {
      name,
      phone,
      reservation_date: date,
      reservation_time: time,
      reservation_guests: guestsStr,
      table_id: tableIdStr,
      message
    };

    // 7. –î–æ–¥–∞—î–º–æ /booking –¥–æ –∫—ñ–Ω—Ü—è URL
    const apiUrl = "https://veii5a3nu7ywmveqyav3zytgwu0fbvrn.lambda-url.eu-north-1.on.aws/booking";

    console.log("‚ñ∂Ô∏è –í—ñ–¥–ø—Ä–∞–≤–∫–∞ POST –Ω–∞:", apiUrl, formData);

    // 8. POST-–∑–∞–ø–∏—Ç —ñ–∑ CORS
    try {
      const resp = await fetch(apiUrl, {
        method:  "POST",
        mode:    "cors",
        cache:   "no-cache",
        headers: { "Content-Type":"application/json" },
        body:    JSON.stringify(formData)
      });
      if(!resp.ok){
        const text = await resp.text();
        console.error("‚ùå Lambda –≤—ñ–¥–ø–æ–≤—ñ–ª–∞ –Ω–µ-OK:",resp.status,text);
        throw new Error(`HTTP ${resp.status}`);
      }
      alert(`–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –°—Ç—ñ–ª ‚Ññ${tableIdStr}.`);
      form.reset();
    } catch(err){
      console.error("üî• –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ:",err);
      alert(
        `–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ä–º—É: ${err.message}. `+
        `–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ CORS-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Lambda –∞–±–æ —Å—Ç–∞—Ç—É—Å Function URL.`
      );
    }
  });
});
